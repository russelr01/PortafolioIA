{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 """\
This sample demonstrates an implementation of the Lex Code Hook Interface\
in order to serve a sample bot which manages reservations for hotel rooms and car rentals.\
Bot, Intent, and Slot models which are compatible with this sample can be found in the Lex Console\
as part of the 'Los Socios' template.\
\
For instructions on how to set up and test this bot, as well as additional samples,\
visit the Lex Getting Started documentation http://docs.aws.amazon.com/lex/latest/dg/getting-started.html.\
"""\
\
# By Pablo Cruz, Nicolas Cardenas and Andres Pi\'f1ones\
\
import json\
import datetime\
import time\
import os\
import dateutil.parser\
import logging\
\
logger = logging.getLogger()\
logger.setLevel(logging.DEBUG)\
\
\
# --- Helpers that build all of the responses ---\
\
\
def delegate(intent_name,session_attributes, slots):\
    return \{\
        'sessionState' : \{\
            'sessionAttributes': session_attributes,\
            'dialogAction' : \{\
                'type' : 'Delegate'\
            \},\
            'intent' : \{\
                'name' : intent_name,\
                'slots': slots,\
                'state' : 'Fulfilled'\
            \}\
        \},\
 \
    \}\
    \
def confirm(intent_name,session_attributes, slots):\
    return \{\
        'sessionState' : \{\
            'sessionAttributes': session_attributes,\
            'dialogAction' : \{\
                'type' : 'Delegate'\
            \},\
            'intent' : \{\
                'name' : intent_name,\
                'slots': slots,\
                'state' : 'Fulfilled'\
            \}\
        \},\
 \
    \}\
\
def cancel(intent_name):\
    return \{\
        'sessionState' : \{\
            'dialogAction' : \{\
                'type' : 'Close',\
                'message': 'Que tenga buen d\'eda'\
            \},\
            'intent' : \{\
                'name' : intent_name,\
                'state' : 'Fulfilled'\
            \}\
        \},\
 \
    \}\
\
\
# --- Helper Functions ---\
\
\
def safe_int(n):\
    """\
    Safely convert n value to int.\
    """\
    if n is not None:\
        return int(n)\
    return n\
\
\
def try_ex(func):\
    """\
    Call passed in function in try block. If KeyError is encountered return None.\
    This function is intended to be used to safely access dictionary.\
\
    Note that this function would have negative impact on performance.\
    """\
\
    try:\
        return func()\
    except KeyError:\
        return None\
\
\
def guardarOrden(intent_request):\
    menu = \{\
    "alambre vegetariano" : 115,\
    "alambre de pechuga" : 120,\
    "alambre de bistec" : 120,\
    "alambre de chuleta" : 120,\
    "alambre de costilla" : 130,\
    "alambre de chuleta" : 145,\
\
    "costra de pastor" : 30,\
    "costra de pechuga" : 35,\
    "costra de arrachera": 145,\
\
    "volcan de pastor" : 22,\
    "volcan de pechuga" : 22,\
    "volcan de bistec" : 28,\
\
    "torta de pastor" : 50,\
    "torta de maciza" : 50,\
    "torta de suadero" : 50,\
    "torta de longaniza" : 50,\
    "torta de pechuga" : 50,\
    "torta de bistec" : 65,\
    "torta de chuleta" : 65,\
\
    "refresco" : 23,\
    "agua natural" : 20,\
    "jamaica" : 24,\
    "horchata" : 24,\
\
    "cerveza en botella" : 33,\
    "cerveza de barril" : 33,\
    "litro de cerveza" : 80,\
    "michelada de litro" : 90,\
    "michelato de litro" : 90,\
\
    "arroz con leche" : 30,\
    "pastel de chocolate" : 35,\
    "fresas con crema" : 35,\
    "gelatina" : 20,\
    "flan" : 30\
    \}\
    print("lleg a la fun")\
    \
    slots = intent_request['interpretations'][0]['intent']['slots']\
    intent_name = intent_request['interpretations'][0]['intent']['name']\
    platillo = slots['Menu']['value']['interpretedValue']\
    print(slots['Quantity'])\
    \
    try:\
        cantidad = slots['Quantity']['value']['interpretedValue']\
    except:\
        cantidad = None\
        \
    try:\
        isOver = slots['AlgoMas']['value']['interpretedValue']\
    except:\
        isOver = None\
        \
    confirmation_status = intent_request['interpretations'][0]['intent']['confirmationState']\
    session_attributes = intent_request['sessionState']["sessionAttributes"] if intent_request['sessionState']["sessionAttributes"] is not None else \{\}\
    print(confirmation_status)\
    \
    if confirmation_status == 'Confirmed':\
        return confirm(intent_name,session_attributes,slots)\
    \
    if confirmation_status == 'Denied':\
        return cancel(intent_name)\
    \
    print(session_attributes["total"])\
    if(cantidad != None and platillo != None and isOver != None):\
        print(str(int(session_attributes["total"]) + (menu[platillo] * int(cantidad))))\
        session_attributes["total"] =  str(int(session_attributes["total"]) + (menu[platillo] * int(cantidad)))\
    \
    \
    \
    \
    print("all good")\
    # Load confirmation history and track the current reservation.\
    \
    \
    \
    if confirmation_status == 'None':\
            # If we are currently auto-populating but have not gotten confirmation, keep requesting for confirmation.\
            # Otherwise, let native DM rules determine how to elicit for slots and/or drive confirmation.\
        return delegate(intent_name, session_attributes, slots)\
\
\
\
""" --- Functions that control the bot's behavior --- """\
\
\
\
# --- Intents ---\
\
\
def dispatch(intent_request):\
    """\
    Called when the user specifies an intent for this bot.\
    """\
    print("Hello lex")\
    #intent_name = intent_request['currentIntent']['name']\
    #raise Exception(intent_request)\
    intent_name = intent_request['interpretations'][0]['intent']['name']\
\
    # Dispatch to your bot's intent handlers\
    if intent_name == 'ordenarPlatillos':\
        print("flag")\
        return guardarOrden(intent_request)\
\
    raise Exception('Intent with name ' + intent_name + ' not supported')\
\
\
# --- Main handler ---\
\
\
def lambda_handler(event, context):\
    """\
    Route the incoming request based on intent.\
    The JSON body of the request is provided in the event slot.\
    """\
    # By default, treat the user request as coming from the America/New_York time zone.\
    os.environ['TZ'] = 'America/New_York'\
    time.tzset()\
    logger.debug('event.bot.name=\{\}'.format(event['bot']['name']))\
    print(event)\
    return dispatch(event)\
}